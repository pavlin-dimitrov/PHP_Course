<? php
// РЕШЕНИЕ С array, rsort;

// Подрежда 3 числа в нарастващ ред;
// 0. Защо е по-добро решение? Ако имаме 7 елемента, броя на пермутациите е 1х2х3х4х5х6х7 = 5040, ще има да попишем ифове.
// 1. Задаваме стойности на променливите;
// 2. Създаваме масив от променливите и го присвояваме към променлива $х;
// 3. Използваме функцията sort за да сортираме стойностите в масива;
// 4. Създаваме променливата $arr_lenght към която присвояваме дължината на масива, броя елементи вградени в масива.
// 5. След това използваме for за да минем през всички елементи в масива и да видим кой къде ще застане:
//		а) Първо поставяме брояч, който е променлива със стойност от която ще започнем броенето. В РНР първият елемент лежи на позиция 0, а не на 1.
//		б) След това пишем условието при което, докато е вярно, функцията ще продължи да се изпълнява, т.е. докато броя на елементите в масива нараства ще се
//			повтаря функцията и ще ни реди елементите във възходящ ред. Когато тази променлива $i стане по-голяма от броя на елементите в масива тя ще спре работа.
//		в) $i++ брояч на повторенията на функцията. Всяка следваща обиколка която правим вдига стойността на $i с 1, имайте предвид, че започваме от 0.



$A = 3;
$B = 10;
$C = 5;
$D = 9;
$E = 16;

$x = array($A, $B, $C, $D, $E);  // Масива;
sort($x);						// Сортираме го по възходящ ред;

$arr_len = count($x);	   // Броим колко елемента има в масива за да знаем колко пъти ще завъртим функцията;
for($i = 0; $i < $arr_len; $i++) {  /* За да кажем на функцията кога да спре да се върти вкарваме променлива, 
										   която ще е нашия брояч на броя превъртания и ще сравнява броя превъртания
										   с вече преброените елементи, с всяко следващо превъртане, тя ще уввличава 
										   собствената си стойност. Когато стойноста и стигне броя на елементите, 
										   функцията спира да се изпълнява.*/
										   
	echo $x[$i];				// Принтираме подредената вече стойност от масива за съответната позиция от оборота на функцията 0 1 2 3 4 5.
	echo "<br>";				// Всяка следваща принтирана позиция започва на нов ред.
}

// Павлин Димитров //

